= Exercice: framework de log
Ambre Marques
:description: Exercice de création d'un framework de log en C++ moderne
:url-repo: https://github.com/ambre-m/formations-fr
:reproducible:
:doctype: book

== Des logs?
=== définitions
En français, on dirait journalisation.

Tout logiciel important ou gros produit des logs.
Ce sont des informations qui permettent de savoir ce que fait le logiciel, et les problèmes qu'il rencontre.
Elles sont émises sur un canal dédié, souvent un fichier, qui permet de les consulter ultérieurement.

Il y a quatre techniques pour le faire:

 - dans la sortie standard ou la sortie d'erreur (std::cout et std::cerr)
 - manuellement avec un std::ofstream
 - avec une bibliothèque éprouvée, comme log4j, log4cpp, spdlog
 - avec du code personnalisé

Chaque solution correspond à des besoins différents.
Les applications en ligne de commande de linux, telles que gcc, écrivent dans leur flux de sortie et leur flux d'erreur.

Dans la pratique, on a toujours une notion de niveau de log, et souvent, on peut séparer ou filtrer les logs selon divers critères

=== niveaux de logs
Le système le plus connu, syslog, qui fait référence en la matière, propose 7 niveaux de logs:

-	Emergency: Système inutilisable. (kernel panic, par exemple)
-	Alert: Une intervention immédiate est nécessaire.
-	Critical: Erreur critique pour le système, mais le système est encore viable.
-	Error: Erreur de fonctionnement.
-	Warning: Avertissement (une erreur peut intervenir si aucune action n'est prise).
-	Notice: Événement normal méritant d'être signalé.
-	Informational: une information courante, permettant de suivre le fonctionnement
-	Debugging: des informations utiles aux développeurs, plus détaillées

Les log4*, elles définissent plutot:

- error: Un problème significatif.
- warning: Une situation méritant l'attention de l'utilisateur.
- info: un message d'information pour que l'utilisateur puisse suivre le fonctionnement.
- debug: des informations détaillées nécessaires pour comprendre un bug
- trace: les messages de suivi dans le code, généralement, à l'entrée et et la sortie d'une fonction.

L'intérêt premier de ces niveaux, c'est qu'on va pouvoir filtrer par niveau.
Par exemple, bloquer les messages inférieurs à warning, ou bien à info.

Notez qu'en réalité, on peut utiliser les niveaux comme on veut, et à tout moment.
L'enjeu est de maintenir une cohérence pour que l'utilisateur puisse s'en servir.

Avec les définitions standard, on voit qu'il y a trois types de messages: les message importants (>info), les informations (info), et les messages à l'intention des développeurs (debug et trace).

Ces niveaux sont intéressants, parce qu'on les retrouvent dans les logiciels courants, comme les OS (journaux système), les jeux (en particulier les MMO), et les logiciels professionnels.
Cela pour que le service d'assistance puisse avoir des informations concrètes et factuelles.

== Le contexte
Cet exercice est la reconstruction d'une situation que j'ai vécue.

Nous sommes sur un logiciel de communication, du type de Discord.
Il y a un serveur (Linux) et plusieurs clients: une application android et une application desktop (Windows et Linux)

Une grosse partie du code est partagée sous forme d'un ensemble de bibliothèques C++, correspondant aux modules fonctionnels.
On y trouve notamment des modules secure-vpn (la gestion du vpn sécurisé), files (transfert de fichiers) et chat (discussions).

Il y a aussi une bibliothèque de journalisation, nommée log.
L'objectif de l'exercice est de le réécrire.

La contrainte majeure est que le message effectivement envoyé n'est pas au format syslog standard, mais en XML.

`<debug module="files" when="20240101102817002" attribut1="value1" attribut2="value2" />`

`<info module="chat" when="20240101102819074" attribut1="value1" >message sent by sender1</info>`


La vérité, c'est qu'il y avait déjà eut une tentative de réécriture des logs.
Tentative qui n'est pas arrivée au bout pour des raisons techniques: à l'époque, boost n'était pas utilisable sur Android.

Log contenait donc à la fois le vieux système (pour Android), et le nouveau (pour le serveur)

Les logs dans le code commun était écrits ainsi:
```
int chat::send_message(conversation & call, std::string const& message) {
	#ifdef NEW_LOG_FRAMEWORK
		log::trace().add_attribute("sender", getUserId()).add_attribute("conversation", call.getId()).write("send_message called with message = %s", message.c_str());
	#else
		{
			chat::log::message_send_event event(getUserId(), conv.getId());
			getLogger().trace(event, "send_message called with message = %s", message);
		}
	#endif

	// ...
}
```

Et ceci était répété des milliers de fois dans le code.
Il fut décidé de remplacer log par quelque chose de plus pratique.

== Les consignes
Le nouveau système de log doit avoir les caractéristiques suivantes:

- La configuration est globale, et logiquement sera faite dans le main() de chaque logiciel.
- Il est possible de choisir quelle sortie sera utilisée.
- La sortie fichier se fait au format xml précédemment exposé.
- Un niveau de filtrage est configurable dans le code.
- les logs sont faciles à écire
- les logs sont composés d'un identifiant, d'un message et d'une série de paire attribut/valeur.
- l'appel des fonctions de log est découplé de l'envoi vers la sortie choisie
- le coût en performance des logs filtrés est minimal.

Il doit être possible de configurer l'absence totale de sortie

=== l'envoi d'un log
Il n'y a qu'un logger global.

Il y a 5 niveaux de logs: error, warning, info, debug et trace.

Le programme doit fonctionner normalement si aucune sortie n'est configurée, ou si le filtrage bloque même les erreurs.

=== configuration
Seule la sortie vers un fichier est à coder.

Cela dit, vous devez concevoir votre bibliothèque de façon à pouvoir proposer d'autres sorties sans impact pour le code métier.
De telles sorties serait syslog ou android_log.

C'est la configuration qui définit le filtrage et la sortie.

=== compilation
A la compilation du projet, si PROJECT_RELEASE est définie, les logs debug et trace sont absent du binaire.
La compilation est informée de l'OS cible, et fournit les macros

- PROJECT_TARGET_SERVER et PROJECT_TARGET_CLIENT
- PROJECT_OS_LINUX, PROJECT_OS_ANDROID, PROJECT_OS_WINDOWS

Vous devez partir du CMakeLists.txt principal fourni, et créer celui du module log.

Prévoyez un mécanisme pour que seules les sorties disponibles sur l'OS cible ne soient proposées. Par exemple, android_log n'est pas proposée pour Windows.
